name: Deploy Node.js App (Optimized)

on:
  push:
    branches:
      - master
      - dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Start Deployment
        run: echo "üöÄ Starting deployment process..."

      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # This will only run if package-lock.json has changed
      - name: Cache node_modules
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Only installs if cache miss (package-lock.json changed)
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          echo "üì¶ Installing dependencies (package.json changed)"
          npm ci

      # This will run regardless (but very fast if dependencies cached)
      - name: Verify Dependencies
        run: |
          echo "‚úÖ Using cached dependencies"
          npm list --depth=0

      # Run tests
      - name: Run Tests
        run: npm test

      # Build if needed
      - name: Build Application
        run: npm run build

      - name: Set Deployment Info
        run: |
          echo "‚öôÔ∏è Setting credentials and path for branch: ${{ github.ref_name }}"
          echo "FTP_SERVER=${{ secrets.LIVE_SSH_HOST }}" >> $GITHUB_ENV
          echo "FTP_USERNAME=${{ secrets.LIVE_SSH_USER }}" >> $GITHUB_ENV
          echo "FTP_PASSWORD=${{ secrets.LIVE_SSH_PASSWORD }}" >> $GITHUB_ENV

          if [ "${{ github.ref_name }}" == "master" ]; then
            echo "FTP_TARGET_DIR=live.hospeasehms.com/" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "FTP_TARGET_DIR=dev.hospeasehms.com/" >> $GITHUB_ENV
          else
            echo "‚ùå Unknown branch, skipping deployment"
            exit 1
          fi

      # Prepare production files (keep node_modules from cache)
      - name: Prepare for deployment
        run: |
          # Remove only development files, keep cached node_modules
          rm -rf .git .github tests *.md .env.example
          echo "üìÅ Deployment files ready"

      - name: üì¶ Deploy via FTPS
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_SERVER }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          protocol: ftp
          port: 21
          server-dir: ${{ env.FTP_TARGET_DIR }}
          local-dir: ./
          exclude: |
            **/.git*
            **/.git*/**
            **/tests/**
            **/*.md
            .env.example
            .gitignore

      - name: Deployment Status
        run: echo "‚úÖ Deployment to ${{ github.ref_name }} completed successfully!!"